Convex hull on voronoi - I have tried this many times. It might be easier with different voronoi lib
Dijkstra to read in lines.json and optimise for price and then number of changes.

Add more tags and show them on page:
    HDW: Great Northern, Zone 6, TFL, National Rail, DFT Category E
    KWG: London Overground, District Line, Zone 3, Zone 4, TFL, National Rail

Walking logic not strictly correct, although might get it right most of the time, as 1 km is not too long:
    Should never modify the cost of an edge during Dijkstra, but we do by looking at previous move.
    4 stations A, B, C, D in a row with inter fares £1, £10 and £1.
    I will chose to walk from A to B, pay £10 to C, then walk to D.
    The best solution, A -> B £1, B -> C walk, C -> D £1, won't be found.
    Not sure if a general purpose solution exists, even if the problem was redefined as having an upper limit of total km.

Notes on stations removed:
    Deduplicated where there existed stations with oyster not accepted.
    Should result in no gaps for inner London queries.
    Will need to deduplicate and merge fares for benefit of outer London queries,
    e.g. HAT -> stratford. Need to merge as not identical:
    select * from fare where to_id='940GZZLUHWC' and from_id in ("910GVAUXHLM","940GZZLUVXL");


People have expressed interest in return fares
    Will double the amount of json - maybe it should be segregated
    Some returns require return travel on same or next day. Will need to assume the most restrictive
    Need to incorporate singles data.

I would like to see what the season ticket map looks like.

